import React, { useState, useEffect, useCallback } from "react";
import { Product } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { 
  Package, 
  Plus, 
  Search, 
  Filter, 
  Camera, 
  Trash2, 
  Edit3, 
  Calendar, 
  MapPin,
  Save,
  X,
  AlertTriangle,
  CheckCircle,
  BarChart3,
  Grid3X3,
  List,
  RefreshCw
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { format, isAfter, differenceInDays } from "date-fns";
import { es } from "date-fns/locale";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import DespensaLogo from "../components/ui/DespensaLogo";
import { productsAPI, useAPI } from "../src/services/api";

// Constantes
const CATEGORIES = [
  { value: "todos", label: "Todas las categor√≠as", emoji: "üì¶" },
  { value: "frutas", label: "Frutas", emoji: "üçé" },
  { value: "verduras", label: "Verduras", emoji: "ü•ï" },
  { value: "carnes", label: "Carnes", emoji: "ü•©" },
  { value: "pescados", label: "Pescados", emoji: "üêü" },
  { value: "lacteos", label: "L√°cteos", emoji: "ü•õ" },
  { value: "cereales", label: "Cereales", emoji: "üåæ" },
  { value: "legumbres", label: "Legumbres", emoji: "ü´ò" },
  { value: "especias", label: "Especias", emoji: "üå∂Ô∏è" },
  { value: "aceites", label: "Aceites", emoji: "ü´í" },
  { value: "otros", label: "Otros", emoji: "üì¶" }
];

const UNITS = [
  { value: "piezas", label: "Piezas" },
  { value: "kg", label: "Kilogramos" },
  { value: "g", label: "Gramos" },
  { value: "l", label: "Litros" },
  { value: "ml", label: "Mililitros" },
  { value: "latas", label: "Latas" },
  { value: "paquetes", label: "Paquetes" }
];

const LOCATIONS = [
  { value: "todos", label: "Todas las ubicaciones", emoji: "üìç" },
  { value: "despensa", label: "Despensa", emoji: "üè™" },
  { value: "nevera", label: "Nevera", emoji: "‚ùÑÔ∏è" },
  { value: "congelador", label: "Congelador", emoji: "üßä" }
];

const SORT_OPTIONS = [
  { value: "name", label: "Por nombre" },
  { value: "expiry", label: "Por fecha de vencimiento" },
  { value: "category", label: "Por categor√≠a" },
  { value: "location", label: "Por ubicaci√≥n" },
  { value: "recent", label: "M√°s recientes" }
];

const CATEGORY_COLORS = {
  frutas: "bg-red-100 text-red-800 border-red-200",
  verduras: "bg-green-100 text-green-800 border-green-200",
  carnes: "bg-pink-100 text-pink-800 border-pink-200",
  pescados: "bg-blue-100 text-blue-800 border-blue-200",
  lacteos: "bg-yellow-100 text-yellow-800 border-yellow-200",
  cereales: "bg-orange-100 text-orange-800 border-orange-200",
  legumbres: "bg-purple-100 text-purple-800 border-purple-200",
  especias: "bg-indigo-100 text-indigo-800 border-indigo-200",
  aceites: "bg-amber-100 text-amber-800 border-amber-200",
  otros: "bg-gray-100 text-gray-800 border-gray-200"
};

// Componente ProductCard
function ProductCard({ product, onEdit, onDelete, onConsume }) {
  const getExpiryStatus = () => {
    if (!product.expiry_date) return null;
    
    const today = new Date();
    const expiryDate = new Date(product.expiry_date);
    const daysLeft = differenceInDays(expiryDate, today);
    
    if (daysLeft < 0) return { status: 'expired', label: 'Vencido', color: 'bg-red-500' };
    if (daysLeft <= 1) return { status: 'critical', label: daysLeft === 0 ? 'Vence hoy' : '1 d√≠a', color: 'bg-orange-500' };
    if (daysLeft <= 3) return { status: 'warning', label: `${daysLeft} d√≠as`, color: 'bg-yellow-500' };
    return { status: 'good', label: `${daysLeft} d√≠as`, color: 'bg-green-500' };
  };

  const expiryStatus = getExpiryStatus();

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      exit={{ opacity: 0, scale: 0.95 }}
      whileHover={{ y: -5 }}
      transition={{ duration: 0.2 }}
    >
      <Card className="group hover:shadow-lg transition-all duration-300 border-0 shadow-md bg-white">
        <CardContent className="p-4">
          {/* Header con acciones */}
          <div className="flex justify-between items-start mb-3">
            <div className="flex-1">
              <h3 className="font-bold text-lg text-gray-900 line-clamp-2">
                {product.name}
              </h3>
            </div>
            <div className="flex gap-1 ml-2">
              <Button
                variant="ghost"
                size="icon"
                onClick={() => onEdit(product)}
                className="w-8 h-8 opacity-0 group-hover:opacity-100 transition-opacity hover:bg-blue-50"
              >
                <Edit3 className="w-4 h-4 text-blue-600" />
              </Button>
              <Button
                variant="ghost"
                size="icon"
                onClick={() => onDelete(product.id)}
                className="w-8 h-8 opacity-0 group-hover:opacity-100 transition-opacity hover:bg-red-50"
              >
                <Trash2 className="w-4 h-4 text-red-600" />
              </Button>
            </div>
          </div>

          {/* Cantidad y unidad */}
          <div className="flex items-center gap-2 mb-3">
            <Package className="w-4 h-4 text-gray-500" />
            <span className="text-lg font-semibold text-gray-900">
              {product.quantity} {product.unit}
            </span>
          </div>

          {/* Categor√≠a y ubicaci√≥n */}
          <div className="flex flex-wrap gap-2 mb-3">
            <Badge className={CATEGORY_COLORS[product.category] || CATEGORY_COLORS.otros}>
              {CATEGORIES.find(c => c.value === product.category)?.emoji} {product.category}
            </Badge>
            <Badge variant="outline" className="text-gray-600">
              {LOCATIONS.find(l => l.value === product.location)?.emoji} {product.location}
            </Badge>
          </div>

          {/* Fecha de vencimiento */}
          {product.expiry_date && (
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <Calendar className="w-4 h-4" />
                <span>Vence: {format(new Date(product.expiry_date), "dd/MM/yyyy", { locale: es })}</span>
              </div>
              {expiryStatus && (
                <Badge className={`${expiryStatus.color} text-white text-xs`}>
                  {expiryStatus.label}
                </Badge>
              )}
            </div>
          )}

          {/* Notas */}
          {product.notes && (
            <p className="text-sm text-gray-600 mb-3 line-clamp-2">
              {product.notes}
            </p>
          )}

          {/* Bot√≥n de consumir */}
          <Button
            onClick={() => onConsume(product.id)}
            className="w-full bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700"
            size="sm"
          >
            <CheckCircle className="w-4 h-4 mr-2" />
            Marcar como consumido
          </Button>
        </CardContent>
      </Card>
    </motion.div>
  );
}

// Componente ProductForm
function ProductForm({ product, onSave, onCancel }) {
  const [formData, setFormData] = useState(product || {
    name: "",
    quantity: 1,
    unit: "piezas",
    category: "otros",
    location: "despensa",
    expiry_date: "",
    purchase_date: new Date().toISOString().split('T')[0],
    notes: ""
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(formData);
  };

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="mb-8"
    >
      <Card className="shadow-lg border-0">
        <CardHeader className="bg-gradient-to-r from-green-50 to-emerald-50 border-b">
          <CardTitle className="flex items-center gap-2 text-green-700">
            <Package className="w-5 h-5" />
            {product ? "Editar Producto" : "A√±adir Nuevo Producto"}
          </CardTitle>
        </CardHeader>
        <CardContent className="p-6">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Nombre del producto */}
              <div className="md:col-span-2">
                <Label htmlFor="name">Nombre del producto *</Label>
                <Input
                  id="name"
                  value={formData.name}
                  onChange={(e) => handleChange("name", e.target.value)}
                  placeholder="Ej: Manzanas rojas"
                  required
                  className="mt-1"
                />
              </div>

              {/* Cantidad */}
              <div>
                <Label htmlFor="quantity">Cantidad *</Label>
                <Input
                  id="quantity"
                  type="number"
                  min="0.1"
                  step="0.1"
                  value={formData.quantity}
                  onChange={(e) => handleChange("quantity", parseFloat(e.target.value))}
                  required
                  className="mt-1"
                />
              </div>

              {/* Unidad */}
              <div>
                <Label htmlFor="unit">Unidad *</Label>
                <Select value={formData.unit} onValueChange={(value) => handleChange("unit", value)}>
                  <SelectTrigger className="mt-1">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {UNITS.map(unit => (
                      <SelectItem key={unit.value} value={unit.value}>
                        {unit.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Categor√≠a */}
              <div>
                <Label htmlFor="category">Categor√≠a *</Label>
                <Select value={formData.category} onValueChange={(value) => handleChange("category", value)}>
                  <SelectTrigger className="mt-1">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {CATEGORIES.filter(cat => cat.value !== "todos").map(category => (
                      <SelectItem key={category.value} value={category.value}>
                        {category.emoji} {category.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Ubicaci√≥n */}
              <div>
                <Label htmlFor="location">Ubicaci√≥n *</Label>
                <Select value={formData.location} onValueChange={(value) => handleChange("location", value)}>
                  <SelectTrigger className="mt-1">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {LOCATIONS.filter(loc => loc.value !== "todos").map(location => (
                      <SelectItem key={location.value} value={location.value}>
                        {location.emoji} {location.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Fecha de compra */}
              <div>
                <Label htmlFor="purchase_date">Fecha de compra</Label>
                <Input
                  id="purchase_date"
                  type="date"
                  value={formData.purchase_date}
                  onChange={(e) => handleChange("purchase_date", e.target.value)}
                  className="mt-1"
                />
              </div>

              {/* Fecha de vencimiento */}
              <div>
                <Label htmlFor="expiry_date">Fecha de vencimiento</Label>
                <Input
                  id="expiry_date"
                  type="date"
                  value={formData.expiry_date}
                  onChange={(e) => handleChange("expiry_date", e.target.value)}
                  className="mt-1"
                />
              </div>

              {/* Notas */}
              <div className="md:col-span-2">
                <Label htmlFor="notes">Notas adicionales</Label>
                <Textarea
                  id="notes"
                  value={formData.notes}
                  onChange={(e) => handleChange("notes", e.target.value)}
                  placeholder="Informaci√≥n adicional sobre el producto..."
                  className="mt-1"
                  rows={3}
                />
              </div>
            </div>

            {/* Botones de acci√≥n */}
            <div className="flex gap-3 pt-4">
              <Button type="submit" className="flex-1 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700">
                <Save className="w-4 h-4 mr-2" />
                {product ? "Actualizar" : "Guardar"} Producto
              </Button>
              <Button type="button" variant="outline" onClick={onCancel} className="flex-1">
                <X className="w-4 h-4 mr-2" />
                Cancelar
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>
    </motion.div>
  );
}

// Componente FilterBar
function FilterBar({
  searchTerm,
  onSearchChange,
  categoryFilter,
  onCategoryChange,
  locationFilter,
  onLocationChange,
  sortBy,
  onSortChange
}) {
  return (
    <Card className="mb-8 shadow-sm border-0 bg-white/80 backdrop-blur-sm">
      <CardContent className="p-4 md:p-6">
        <div className="flex flex-col md:flex-row gap-4">
          {/* B√∫squeda */}
          <div className="flex-1 relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <Input
              placeholder="Buscar productos..."
              value={searchTerm}
              onChange={(e) => onSearchChange(e.target.value)}
              className="pl-10 h-10"
            />
          </div>

          {/* Filtros */}
          <div className="grid grid-cols-2 md:flex gap-2 md:gap-3 items-center">
            <Select value={categoryFilter} onValueChange={onCategoryChange}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {CATEGORIES.map(category => (
                  <SelectItem key={category.value} value={category.value}>
                    {category.emoji} {category.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            <Select value={locationFilter} onValueChange={onLocationChange}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {LOCATIONS.map(location => (
                  <SelectItem key={location.value} value={location.value}>
                    {location.emoji} {location.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            <Select value={sortBy} onValueChange={onSortChange}>
              <SelectTrigger className="col-span-2">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {SORT_OPTIONS.map(option => (
                  <SelectItem key={option.value} value={option.value}>
                    {option.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

// Componente EmptyState
function EmptyState({ hasProducts, onAddProduct }) {
  if (hasProducts) {
    // Cuando hay productos pero el filtro no muestra ninguno
    return (
      <div className="text-center py-16">
        <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
          <Search className="w-12 h-12 text-gray-400" />
        </div>
        <h3 className="text-xl font-semibold text-gray-900 mb-2">
          No se encontraron productos
        </h3>
        <p className="text-gray-600 mb-6 max-w-md mx-auto">
          Intenta cambiar los filtros o t√©rminos de b√∫squeda para encontrar lo que buscas.
        </p>
        <Button
          variant="outline"
          onClick={() => {
            window.location.reload();
          }}
        >
          Limpiar Filtros
        </Button>
      </div>
    );
  }

  // Cuando no hay productos en absoluto
  return (
    <div className="text-center py-16">
      <div className="w-32 h-32 bg-gradient-to-br from-green-100 to-emerald-100 rounded-full flex items-center justify-center mx-auto mb-8">
        <Package className="w-16 h-16 text-green-600" />
      </div>
      
      <h3 className="text-2xl font-bold text-gray-900 mb-3">
        ¬°Tu despensa est√° vac√≠a!
      </h3>
      <p className="text-gray-600 mb-8 max-w-md mx-auto text-lg">
        Comienza a√±adiendo productos para gestionar tu despensa de manera inteligente.
      </p>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 max-w-md mx-auto mb-8">
        <Card className="group hover:shadow-lg transition-all duration-300 cursor-pointer">
          <Link to={createPageUrl("ScanTicket")}>
            <CardContent className="p-6 text-center">
              <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-3 group-hover:scale-110 transition-transform">
                <Camera className="w-6 h-6 text-blue-600" />
              </div>
              <h4 className="font-semibold text-gray-900 mb-2">Escanear Ticket</h4>
              <p className="text-sm text-gray-600">A√±ade productos autom√°ticamente</p>
            </CardContent>
          </Link>
        </Card>

        <Card className="group hover:shadow-lg transition-all duration-300 cursor-pointer" onClick={onAddProduct}>
          <CardContent className="p-6 text-center">
            <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-3 group-hover:scale-110 transition-transform">
              <DespensaLogo className="w-6 h-6 text-green-600" />
            </div>
            <h4 className="font-semibold text-gray-900 mb-2">A√±adir Manualmente</h4>
            <p className="text-sm text-gray-600">Agrega productos uno por uno</p>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

// Componente principal MyPantry
export default function MyPantry() {
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showForm, setShowForm] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);
  const [viewMode, setViewMode] = useState("grid"); // grid o list
  const [error, setError] = useState(null);

  // Estados de filtros
  const [searchTerm, setSearchTerm] = useState("");
  const [categoryFilter, setCategoryFilter] = useState("todos");
  const [locationFilter, setLocationFilter] = useState("todos");
  const [sortBy, setSortBy] = useState("name");

  // Hook para manejar API calls
  const { loading: apiLoading, error: apiError, executeAPI } = useAPI();

  // Cargar productos desde la API
  const loadProducts = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const filters = {
        search: searchTerm,
        category: categoryFilter !== "todos" ? categoryFilter : undefined,
        location: locationFilter !== "todos" ? locationFilter : undefined,
        sort: sortBy
      };

      const data = await executeAPI(() => productsAPI.getAll(filters));
      setProducts(data.products || []);
    } catch (err) {
      console.error("Error cargando productos:", err);
      setError(err.message);
      
      // Fallback a datos de ejemplo en caso de error
      const mockProducts = [
        {
          id: 1,
          name: "Manzanas Rojas",
          quantity: 6,
          unit: "piezas",
          category: "frutas",
          location: "nevera",
          expiry_date: "2024-01-25",
          purchase_date: "2024-01-15",
          notes: "Perfectas para hacer jugo"
        },
        {
          id: 2,
          name: "Leche Entera",
          quantity: 1,
          unit: "l",
          category: "lacteos",
          location: "nevera",
          expiry_date: "2024-01-20",
          purchase_date: "2024-01-10",
          notes: ""
        },
        {
          id: 3,
          name: "Arroz Integral",
          quantity: 2,
          unit: "kg",
          category: "cereales",
          location: "despensa",
          expiry_date: "2024-06-15",
          purchase_date: "2024-01-05",
          notes: "Marca premium"
        }
      ];
      setProducts(mockProducts);
    } finally {
      setIsLoading(false);
    }
  }, [searchTerm, categoryFilter, locationFilter, sortBy, executeAPI]);

  // Cargar productos al montar el componente
  useEffect(() => {
    loadProducts();
  }, [loadProducts]);

  // Filtrar y ordenar productos
  useEffect(() => {
    let filtered = [...products];

    // Filtro por b√∫squeda
    if (searchTerm) {
      filtered = filtered.filter(product =>
        product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.notes.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // Filtro por categor√≠a
    if (categoryFilter !== "todos") {
      filtered = filtered.filter(product => product.category === categoryFilter);
    }

    // Filtro por ubicaci√≥n
    if (locationFilter !== "todos") {
      filtered = filtered.filter(product => product.location === locationFilter);
    }

    // Ordenamiento
    filtered.sort((a, b) => {
      switch (sortBy) {
        case "name":
          return a.name.localeCompare(b.name);
        case "expiry":
          if (!a.expiry_date && !b.expiry_date) return 0;
          if (!a.expiry_date) return 1;
          if (!b.expiry_date) return -1;
          return new Date(a.expiry_date) - new Date(b.expiry_date);
        case "category":
          return a.category.localeCompare(b.category);
        case "location":
          return a.location.localeCompare(b.location);
        case "recent":
          return new Date(b.purchase_date) - new Date(a.purchase_date);
        default:
          return 0;
      }
    });

    setFilteredProducts(filtered);
  }, [products, searchTerm, categoryFilter, locationFilter, sortBy]);

  // Funciones de manejo
  const handleAddProduct = () => {
    setEditingProduct(null);
    setShowForm(true);
  };

  const handleEditProduct = (product) => {
    setEditingProduct(product);
    setShowForm(true);
  };

  const handleSaveProduct = async (productData) => {
    try {
      if (editingProduct) {
        // Actualizar producto existente
        await executeAPI(() => productsAPI.update(editingProduct.id, productData));
        setProducts(prev => prev.map(p => 
          p.id === editingProduct.id ? { ...productData, id: editingProduct.id } : p
        ));
      } else {
        // A√±adir nuevo producto
        const newProduct = await executeAPI(() => productsAPI.create(productData));
        setProducts(prev => [...prev, newProduct]);
      }
      setShowForm(false);
      setEditingProduct(null);
    } catch (err) {
      console.error("Error guardando producto:", err);
      // En caso de error, mantener el formulario abierto para que el usuario pueda intentar de nuevo
    }
  };

  const handleDeleteProduct = async (productId) => {
    if (window.confirm("¬øEst√°s seguro de que quieres eliminar este producto?")) {
      try {
        await executeAPI(() => productsAPI.delete(productId));
        setProducts(prev => prev.filter(p => p.id !== productId));
      } catch (err) {
        console.error("Error eliminando producto:", err);
        alert("Error al eliminar el producto. Int√©ntalo de nuevo.");
      }
    }
  };

  const handleConsumeProduct = async (productId) => {
    if (window.confirm("¬øMarcar este producto como consumido?")) {
      try {
        await executeAPI(() => productsAPI.consume(productId));
        setProducts(prev => prev.filter(p => p.id !== productId));
      } catch (err) {
        console.error("Error marcando producto como consumido:", err);
        alert("Error al marcar el producto como consumido. Int√©ntalo de nuevo.");
      }
    }
  };

  const handleCancelForm = () => {
    setShowForm(false);
    setEditingProduct(null);
  };

  // Estad√≠sticas r√°pidas
  const getStats = () => {
    const total = products.length;
    const expiringSoon = products.filter(p => {
      if (!p.expiry_date) return false;
      const daysLeft = differenceInDays(new Date(p.expiry_date), new Date());
      return daysLeft <= 3 && daysLeft >= 0;
    }).length;
    const expired = products.filter(p => {
      if (!p.expiry_date) return false;
      return differenceInDays(new Date(p.expiry_date), new Date()) < 0;
    }).length;

    return { total, expiringSoon, expired };
  };

  const stats = getStats();

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-emerald-50">
        <div className="container mx-auto px-4 py-8">
          <div className="text-center py-16">
            <div className="w-16 h-16 border-4 border-green-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-gray-600">Cargando tu despensa...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-emerald-50">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div>
              <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-2 flex items-center gap-3">
                <div className="w-10 h-10 bg-gradient-to-r from-green-500 to-emerald-600 rounded-xl flex items-center justify-center">
                  <Package className="w-6 h-6 text-white" />
                </div>
                Mi Despensa
              </h1>
              <p className="text-gray-600 text-lg">
                Gestiona tus productos de manera inteligente
              </p>
            </div>
            <div className="flex gap-3">
              <Button 
                onClick={loadProducts}
                variant="outline"
                disabled={isLoading}
                className="shadow-lg"
              >
                <RefreshCw className={`w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
                Actualizar
              </Button>
              <Link to={createPageUrl("ScanTicket")}>
                <Button className="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 shadow-lg">
                  <Camera className="w-4 h-4 mr-2" />
                  Escanear Ticket
                </Button>
              </Link>
              <Button 
                onClick={handleAddProduct}
                className="bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 shadow-lg"
              >
                <Plus className="w-4 h-4 mr-2" />
                A√±adir Producto
              </Button>
            </div>
          </div>

          {/* Error Message */}
          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
              <div className="flex items-center">
                <div className="text-red-600 text-sm">
                  <strong>Error:</strong> {error}
                </div>
              </div>
            </div>
          )}

          {/* Estad√≠sticas r√°pidas */}
          {products.length > 0 && (
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mt-6">
              <Card className="bg-gradient-to-r from-blue-50 to-blue-100 border-blue-200">
                <CardContent className="p-4 text-center">
                  <Package className="w-8 h-8 text-blue-600 mx-auto mb-2" />
                  <p className="text-2xl font-bold text-blue-700">{stats.total}</p>
                  <p className="text-sm text-blue-600">Total productos</p>
                </CardContent>
              </Card>
              <Card className="bg-gradient-to-r from-yellow-50 to-yellow-100 border-yellow-200">
                <CardContent className="p-4 text-center">
                  <AlertTriangle className="w-8 h-8 text-yellow-600 mx-auto mb-2" />
                  <p className="text-2xl font-bold text-yellow-700">{stats.expiringSoon}</p>
                  <p className="text-sm text-yellow-600">Por vencer</p>
                </CardContent>
              </Card>
              <Card className="bg-gradient-to-r from-red-50 to-red-100 border-red-200">
                <CardContent className="p-4 text-center">
                  <X className="w-8 h-8 text-red-600 mx-auto mb-2" />
                  <p className="text-2xl font-bold text-red-700">{stats.expired}</p>
                  <p className="text-sm text-red-600">Vencidos</p>
                </CardContent>
              </Card>
              <Card className="bg-gradient-to-r from-green-50 to-green-100 border-green-200">
                <CardContent className="p-4 text-center">
                  <BarChart3 className="w-8 h-8 text-green-600 mx-auto mb-2" />
                  <p className="text-2xl font-bold text-green-700">{Math.round((stats.total - stats.expired) / stats.total * 100) || 0}%</p>
                  <p className="text-sm text-green-600">En buen estado</p>
                </CardContent>
              </Card>
            </div>
          )}
        </div>

        {/* Formulario de producto */}
        <AnimatePresence>
          {showForm && (
            <ProductForm
              product={editingProduct}
              onSave={handleSaveProduct}
              onCancel={handleCancelForm}
            />
          )}
        </AnimatePresence>

        {/* Filtros */}
        {products.length > 0 && (
          <FilterBar
            searchTerm={searchTerm}
            onSearchChange={setSearchTerm}
            categoryFilter={categoryFilter}
            onCategoryChange={setCategoryFilter}
            locationFilter={locationFilter}
            onLocationChange={setLocationFilter}
            sortBy={sortBy}
            onSortChange={setSortBy}
          />
        )}

        {/* Lista de productos */}
        {filteredProducts.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            <AnimatePresence>
              {filteredProducts.map((product) => (
                <ProductCard
                  key={product.id}
                  product={product}
                  onEdit={handleEditProduct}
                  onDelete={handleDeleteProduct}
                  onConsume={handleConsumeProduct}
                />
              ))}
            </AnimatePresence>
          </div>
        ) : (
          <EmptyState 
            hasProducts={products.length > 0}
            onAddProduct={handleAddProduct}
          />
        )}
      </div>
    </div>
  );
}