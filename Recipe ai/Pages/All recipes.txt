import React, { useState, useEffect } from "react";
import { Product, Recipe, User } from "@/entities/all";
import { InvokeLLM } from "@/integrations/Core";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Sparkles, ChefHat, Clock, Users, Loader2, Wand2 } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { motion, AnimatePresence } from "framer-motion";

import IngredientSelector from "../components/ai-recipes/IngredientSelector";
import RecipePreferences from "../components/ai-recipes/RecipePreferences";
import GeneratedRecipeCard from "../components/ai-recipes/GeneratedRecipeCard";
import SavedAIRecipes from "../components/ai-recipes/SavedAIRecipes";

export default function AIRecipes() {
  const [products, setProducts] = useState([]);
  const [selectedIngredients, setSelectedIngredients] = useState([]);
  const [preferences, setPreferences] = useState({
    meal_type: "",
    difficulty: "",
    prep_time: "",
    health_style: "",
    dietary_restrictions: []
  });
  const [generatedRecipe, setGeneratedRecipe] = useState(null);
  const [savedRecipes, setSavedRecipes] = useState([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState("generate");

  useEffect(() => {
    loadUserProducts();
    loadSavedAIRecipes();
  }, []);

  const loadUserProducts = async () => {
    try {
      const user = await User.me();
      const data = await Product.filter({ created_by: user.email }, "-created_date");
      setProducts(data);
    } catch (error) {
      console.error("Error loading products:", error);
    }
  };

  const loadSavedAIRecipes = async () => {
    try {
      const user = await User.me();
      const data = await Recipe.filter({ 
        created_by: user.email, 
        is_ai_generated: true 
      }, "-created_date", 10);
      setSavedRecipes(data);
    } catch (error) {
      console.error("Error loading AI recipes:", error);
    }
  };

  const generateRecipe = async () => {
    if (selectedIngredients.length === 0) {
      setError("Selecciona al menos un ingrediente para generar una receta");
      return;
    }

    setIsGenerating(true);
    setError(null);
    setGeneratedRecipe(null);

    try {
      const ingredientsList = selectedIngredients.map(ing => `${ing.name} (${ing.quantity} ${ing.unit})`).join(", ");
      
      let prompt = `Genera una receta deliciosa y detallada usando principalmente estos ingredientes: ${ingredientsList}.`;
      
      if (preferences.meal_type) prompt += ` La receta debe ser para ${preferences.meal_type}.`;
      if (preferences.difficulty) prompt += ` La dificultad debe ser ${preferences.difficulty}.`;
      if (preferences.prep_time) prompt += ` El tiempo de preparación debe ser ${preferences.prep_time}.`;
      if (preferences.health_style) {
        const healthDescriptions = {
          fit: "saludable, baja en calorías (300-450 cal por porción), alta en proteínas, con ingredientes nutritivos",
          balanced: "balanceada nutricionalmente, moderada en calorías (450-650 cal por porción)",
          indulgent: "reconfortante y sabrosa, puede ser más calórica (650+ cal por porción), enfócate en el sabor"
        };
        prompt += ` La receta debe ser ${healthDescriptions[preferences.health_style]}.`;
      }
      if (preferences.dietary_restrictions.length > 0) prompt += ` Considera las siguientes restricciones dietéticas: ${preferences.dietary_restrictions.join(", ")}.`;

      prompt += ` 
      Proporciona instrucciones paso a paso claras y detalladas.
      Si falta algún ingrediente común, menciónalo en la lista de ingredientes.
      La receta debe ser práctica y deliciosa.
      IMPORTANTE: Incluye una estimación de calorías por porción basada en los ingredientes y método de cocción.`;

      const recipeSchema = {
        type: "object",
        properties: {
          title: { type: "string" },
          description: { type: "string" },
          ingredients: { type: "array", items: { type: "object", properties: { name: { type: "string" }, quantity: { type: "string" }, optional: { type: "boolean" } } } },
          instructions: { type: "array", items: { type: "string" } },
          prep_time: { type: "number" },
          cook_time: { type: "number" },
          servings: { type: "number" },
          calories_per_serving: { type: "number" },
          difficulty: { type: "string" },
          tags: { type: "array", items: { type: "string" } }
        }
      };

      const result = await InvokeLLM({ prompt, response_json_schema: recipeSchema });

      setGeneratedRecipe({ ...result, category: preferences.meal_type || "almuerzo", is_ai_generated: true });
    } catch (error) {
      setError("Error generando la receta. Inténtalo de nuevo.");
      console.error("Error generating recipe:", error);
    }

    setIsGenerating(false);
  };

  const saveGeneratedRecipe = async () => {
    if (!generatedRecipe) return;
    try {
      await Recipe.create(generatedRecipe);
      setGeneratedRecipe(null);
      setSelectedIngredients([]);
      loadSavedAIRecipes();
      setActiveTab("saved");
    } catch (error) {
      setError("Error guardando la receta. Inténtalo de nuevo.");
      console.error("Error saving recipe:", error);
    }
  };

  return (
    <div className="min-h-screen p-0 md:p-8 md:bg-gradient-to-br md:from-purple-50 md:via-white md:to-pink-50">
      <div className="max-w-6xl mx-auto">
        <div className="hidden md:block mb-8">
          <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-2 flex items-center gap-3">
            <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center">
              <Sparkles className="w-6 h-6 text-white" />
            </div>
            Recetas con IA
          </h1>
          <p className="text-gray-600 text-lg">
            Genera recetas personalizadas basadas en los ingredientes de tu despensa
          </p>
        </div>

        <div className="px-4 md:px-0">
            <div className="flex gap-4 mb-8 border-b md:border-b-0">
              <Button
                variant="ghost"
                onClick={() => setActiveTab("generate")}
                className={`flex-1 md:flex-none rounded-none md:rounded-md ${activeTab === "generate" ? "border-b-2 border-purple-500 text-purple-600" : "text-gray-500"}`}
              >
                <Wand2 className="w-4 h-4 mr-2" />
                Generar
              </Button>
              <Button
                variant="ghost"
                onClick={() => setActiveTab("saved")}
                className={`flex-1 md:flex-none rounded-none md:rounded-md ${activeTab === "saved" ? "border-b-2 border-purple-500 text-purple-600" : "text-gray-500"}`}
              >
                <ChefHat className="w-4 h-4 mr-2" />
                Mis Recetas ({savedRecipes.length})
              </Button>
            </div>
        </div>

        <AnimatePresence>
          {error && (
            <motion.div initial={{ opacity: 0, y: -10 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -10 }} className="mb-6 px-4 md:px-0">
              <Alert variant="destructive"><AlertDescription>{error}</AlertDescription></Alert>
            </motion.div>
          )}
        </AnimatePresence>

        {activeTab === "generate" ? (
          <div className="grid lg:grid-cols-2 gap-8">
            <div className="space-y-6">
              <IngredientSelector products={products} selectedIngredients={selectedIngredients} onIngredientsChange={setSelectedIngredients} />
              <RecipePreferences preferences={preferences} onPreferencesChange={setPreferences} />
              <div className="p-4 md:p-0">
                <Button onClick={generateRecipe} disabled={isGenerating || selectedIngredients.length === 0} className="w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 shadow-lg h-12">
                  {isGenerating ? (<><Loader2 className="w-5 h-5 mr-2 animate-spin" /> Generando...</>) : (<><Sparkles className="w-5 h-5 mr-2" /> Generar Receta</>)}
                </Button>
              </div>
            </div>

            <div className="px-4 md:px-0">
              {isGenerating && (
                  <div className="flex flex-col items-center justify-center h-full min-h-[500px] text-center">
                    <Loader2 className="w-12 h-12 text-purple-500 animate-spin mb-4" />
                    <p className="text-lg font-semibold text-gray-700">Creando una receta deliciosa...</p>
                    <p className="text-gray-500">La IA está mezclando los ingredientes.</p>
                  </div>
              )}
              {generatedRecipe && <GeneratedRecipeCard recipe={generatedRecipe} onSave={saveGeneratedRecipe} onDiscard={() => setGeneratedRecipe(null)} />}
            </div>
          </div>
        ) : (
          <SavedAIRecipes recipes={savedRecipes} />
        )}
      </div>
    </div>
  );
}