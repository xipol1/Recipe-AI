import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Plus, X, Search, Package } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

const CATEGORY_COLORS = {
  frutas: "bg-red-100 text-red-800",
  verduras: "bg-green-100 text-green-800", 
  carnes: "bg-pink-100 text-pink-800",
  pescados: "bg-blue-100 text-blue-800",
  lacteos: "bg-yellow-100 text-yellow-800",
  cereales: "bg-orange-100 text-orange-800",
  legumbres: "bg-purple-100 text-purple-800",
  especias: "bg-indigo-100 text-indigo-800",
  aceites: "bg-amber-100 text-amber-800",
  otros: "bg-gray-100 text-gray-800"
};

export default function IngredientSelector({ products, selectedIngredients, onIngredientsChange }) {
  const [searchTerm, setSearchTerm] = useState("");
  const [showCustomInput, setShowCustomInput] = useState(false);
  const [customIngredient, setCustomIngredient] = useState("");

  const filteredProducts = products.filter(product =>
    product.name.toLowerCase().includes(searchTerm.toLowerCase()) &&
    !selectedIngredients.find(selected => selected.id === product.id)
  );

  const addIngredient = (product) => {
    onIngredientsChange([...selectedIngredients, {
      id: product.id,
      name: product.name,
      quantity: product.quantity,
      unit: product.unit,
      category: product.category
    }]);
  };

  const addCustomIngredient = () => {
    if (!customIngredient.trim()) return;
    
    const newIngredient = {
      id: `custom-${Date.now()}`,
      name: customIngredient,
      quantity: 1,
      unit: "piezas",
      category: "otros",
      isCustom: true
    };
    
    onIngredientsChange([...selectedIngredients, newIngredient]);
    setCustomIngredient("");
    setShowCustomInput(false);
  };

  const removeIngredient = (ingredientId) => {
    onIngredientsChange(selectedIngredients.filter(ing => ing.id !== ingredientId));
  };

  const updateIngredientQuantity = (ingredientId, quantity) => {
    onIngredientsChange(selectedIngredients.map(ing => 
      ing.id === ingredientId ? { ...ing, quantity: parseFloat(quantity) || 1 } : ing
    ));
  };

  return (
    <Card className="shadow-lg">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Package className="w-5 h-5 text-purple-600" />
          Seleccionar Ingredientes
        </CardTitle>
        <p className="text-sm text-gray-600">
          Elige los ingredientes de tu despensa para generar una receta
        </p>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Ingredientes seleccionados */}
        {selectedIngredients.length > 0 && (
          <div>
            <h3 className="font-semibold text-gray-900 mb-3">
              Ingredientes seleccionados ({selectedIngredients.length})
            </h3>
            <div className="space-y-2">
              <AnimatePresence>
                {selectedIngredients.map((ingredient) => (
                  <motion.div
                    key={ingredient.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    className="flex items-center gap-3 p-3 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-200"
                  >
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <span className="font-medium text-gray-900">{ingredient.name}</span>
                        <Badge className={`${CATEGORY_COLORS[ingredient.category]} text-xs`}>
                          {ingredient.category}
                        </Badge>
                        {ingredient.isCustom && (
                          <Badge variant="outline" className="text-xs">Custom</Badge>
                        )}
                      </div>
                      <div className="flex items-center gap-2">
                        <Input
                          type="number"
                          min="0.1"
                          step="0.1"
                          value={ingredient.quantity}
                          onChange={(e) => updateIngredientQuantity(ingredient.id, e.target.value)}
                          className="w-20 h-7 text-sm"
                        />
                        <span className="text-sm text-gray-600">{ingredient.unit}</span>
                      </div>
                    </div>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => removeIngredient(ingredient.id)}
                      className="text-red-500 hover:text-red-700 hover:bg-red-50 w-8 h-8"
                    >
                      <X className="w-4 h-4" />
                    </Button>
                  </motion.div>
                ))}
              </AnimatePresence>
            </div>
          </div>
        )}

        {/* Buscar ingredientes */}
        <div>
          <h3 className="font-semibold text-gray-900 mb-3">Ingredientes disponibles</h3>
          <div className="relative mb-4">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <Input
              placeholder="Buscar en tu despensa..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>

          {/* Lista de productos */}
          <div className="space-y-2 max-h-64 overflow-y-auto">
            {filteredProducts.map((product) => (
              <motion.div
                key={product.id}
                whileHover={{ scale: 1.02 }}
                className="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer"
                onClick={() => addIngredient(product)}
              >
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-1">
                    <span className="font-medium text-gray-900">{product.name}</span>
                    <Badge className={`${CATEGORY_COLORS[product.category]} text-xs`}>
                      {product.category}
                    </Badge>
                  </div>
                  <span className="text-sm text-gray-600">
                    {product.quantity} {product.unit} disponibles
                  </span>
                </div>
                <Button size="sm" variant="outline" className="hover:bg-purple-50">
                  <Plus className="w-4 h-4" />
                </Button>
              </motion.div>
            ))}
            
            {filteredProducts.length === 0 && searchTerm && (
              <p className="text-gray-500 text-center py-4">
                No se encontraron ingredientes que coincidan con "{searchTerm}"
              </p>
            )}
            
            {products.length === 0 && (
              <p className="text-gray-500 text-center py-4">
                No tienes productos en tu despensa. 
                <br />
                A単ade algunos productos primero.
              </p>
            )}
          </div>
        </div>

        {/* A単adir ingrediente personalizado */}
        <div className="border-t pt-4">
          {!showCustomInput ? (
            <Button
              variant="outline"
              onClick={() => setShowCustomInput(true)}
              className="w-full border-dashed border-gray-300 hover:border-purple-300"
            >
              <Plus className="w-4 h-4 mr-2" />
              A単adir ingrediente personalizado
            </Button>
          ) : (
            <div className="flex gap-2">
              <Input
                placeholder="Nombre del ingrediente..."
                value={customIngredient}
                onChange={(e) => setCustomIngredient(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && addCustomIngredient()}
                className="flex-1"
              />
              <Button onClick={addCustomIngredient} disabled={!customIngredient.trim()}>
                A単adir
              </Button>
              <Button
                variant="outline"
                onClick={() => {
                  setShowCustomInput(false);
                  setCustomIngredient("");
                }}
              >
                Cancelar
              </Button>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
